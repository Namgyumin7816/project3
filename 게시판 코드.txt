이것저것 다해봤지만 계속 가상환경이 오류가 떠서 전에 작업했던 파일을 가져와서 코드를 작성했으나 혹시라도 안될경우를 대비해서 메모장으로도 코드를
올립니다. 읽으신다면 게시판 만들 폴더를 파워쉘로 생성해주시고 코드를 붙여넣어주시거나 폴더 생성해주시면 제가 코드 .계속 번거롭게 해서 죄송합니다.


"""
Django settings for portfolio project.

Generated by 'django-admin startproject' using Django 2.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '96eu5#635d^1sp@gwx%_fv71t-3e%k@2299rr26c8gfo!81s3j'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'blog.apps.BlogConfig',
    'project2.apps.Project2Config',
    'friends.apps.FriendsConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'portfolio.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'portfolio.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'
USE_I18N = True

USE_L10N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATICFILES_DIRS = [ os.path.join(BASE_DIR, 'portfolio/static')

]

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')


MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'
{settings.py 파일 코드}
from django.db import models

# Create your models here.
class Post(models.Model):
	writer = models.CharField(max_length=100)
	post_date = models.DateTimeField(auto_now_add=True)
	post_title = models.CharField(max_length=100)
	post_contents = models.TextField(blank=True,help_text='Post Contents')
	
	class Meta:
		ordering = [' -post_date']

	def __str__(self):
		return self.post_title

	def get_abolute_url(self):
		return reverse('post-detail', args=[str(self.id)])
{models.py 파일 코드}

from django.urls import path, include
from . import views
urlpatterns = [
 
    path('',views.PostListView.as_view(), name='board_index'),
    path('post/<int:pk>', views.PostDetailView.as_view(), name='post-detail')
    path('post/write', views.post_write, name="post_write"),
    path('post/update/<int:pk>', views.post_update, name="post_update"),
    
]

{urls.py 파일 코드}

from django.shortcuts import render
from .models import Post

class PostListView(generic.ListView):
	model = Post
	paginate_by = 10

class PostDetailView(generic.DetailView):
	model = Post

@login_required
def post_write(request):
	# save process
	if request.method == 'POST':
		form = CreatePostForm(request.POST)

		if form.is_valid():
			conn_user = request.user
			conn_user = request.conn_userconn_profile = Profile.objects.get(user=conn_user)
			nick = conn_profile.nick
			#new_post = Post()
			new_post = form.save(commit=False)
			new_post.writer = nick
			new_post.save()
			messages.info(request, 'Successfully Post!')
			return HttpResponseRedirect(reverse_lazy('board_index'))
	# send form
	else:
		form = CreatePostForm()

	return render(request, 'board/write_post.html', {'form': form})

{views.py 파일 코드}



